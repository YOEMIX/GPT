import asyncio
import logging
import os
from aiogram import Bot, Router, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
from utils import process_message
from keep_alive import keep_alive
keep_alive()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()
dp.bot = bot
dp.include_router(router)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞)
image_path = os.path.join('Default_A_serene_cityscape_at_dawn_the_calm_before_the_storm_0.jpg')

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ InputFile
photo = types.FSInputFile(image_path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def send_welcome(message: types.Message):
    try:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption="–ü—Ä–∏–≤–µ—Çüëã, –Ø –ò–ò –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —Å–∫–∏–ª—ã –∏ –∑–Ω–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤—ã–∏–≥—Ä–∞—Ç—å –¥–µ–±–∞—Ç—ãüöÄ –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–æ –º–Ω–æ–π –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Çüòá \n –£–¥–∞—á–∏ !",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ",
                        url="https://youtube.com/shorts/XySzMwLDQjY?feature=share"
                    )
                ]]
            )
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_message(message: types.Message):
    try:
        response = process_message(message)
        await message.answer(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
@router.errors_handler()
async def errors_handler(update: types.Update, exception: Exception):
    logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exception}")
    return True
    
if __name__ == '__main__':
    from database import create_table
    create_table()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 10000
    PORT = int(os.environ.get('PORT', 10000))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot, host='0.0.0.0', port=PORT))
